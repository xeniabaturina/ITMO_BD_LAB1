pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag to deploy')
        string(name: 'DOCKER_HUB_REPO', defaultValue: '', description: 'Docker Hub repository name')
    }
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        DEPLOYMENT_DIR = '/opt/penguin-classifier'
    }
    
    stages {
        stage('Pull Docker Image') {
            steps {
                sh 'echo $DOCKER_HUB_CREDS_PSW | docker login -u $DOCKER_HUB_CREDS_USR --password-stdin'
                sh 'docker pull ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}'
                echo "Pulled Docker image: ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}"
            }
        }
        
        stage('Deploy Container') {
            steps {
                sh '''
                # Stop any running container with the same name
                docker stop penguin-classifier || true
                docker rm penguin-classifier || true
                
                # Create deployment directory if not exists
                mkdir -p ${DEPLOYMENT_DIR}
                
                # Run the container
                docker run -d \
                    --name penguin-classifier \
                    -p 5000:5000 \
                    -v ${DEPLOYMENT_DIR}/data:/app/data \
                    -v ${DEPLOYMENT_DIR}/logs:/app/logs \
                    -v ${DEPLOYMENT_DIR}/results:/app/results \
                    -v ${DEPLOYMENT_DIR}/experiments:/app/experiments \
                    ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}
                '''
                echo "Deployed container from image: ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}"
            }
        }
        
        stage('Run Functional Tests') {
            steps {
                script {
                    // Wait for the API to be ready
                    sh 'sleep 10'
                    
                    // Test health endpoint
                    def healthStatus = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health', returnStdout: true).trim()
                    if (healthStatus != '200') {
                        error "Health check failed with status: ${healthStatus}"
                    }
                    
                    // Test prediction endpoint with sample data
                    sh '''
                    # Create test data for prediction
                    cat > test_data.json << EOF
                    {
                        "island": "Torgersen",
                        "bill_length_mm": 39.1,
                        "bill_depth_mm": 18.7,
                        "flipper_length_mm": 181.0,
                        "body_mass_g": 3750.0,
                        "sex": "male"
                    }
                    EOF
                    
                    # Test prediction
                    PREDICTION_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d @test_data.json http://localhost:5000/predict)
                    echo "Prediction response: ${PREDICTION_RESPONSE}"
                    
                    # Verify prediction response is valid JSON and has success=true
                    echo ${PREDICTION_RESPONSE} | jq -e '.success == true' > /dev/null
                    
                    # Save results to file for reporting
                    mkdir -p test_results
                    echo ${PREDICTION_RESPONSE} > test_results/prediction_test.json
                    '''
                    
                    echo "Functional tests completed successfully"
                }
            }
        }
        
        stage('Generate Test Report') {
            steps {
                sh '''
                # Create a test report
                cat > test_results/report.md << EOF
                # Functional Test Report
                
                ## Deployment Information
                - Docker Image: ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG}
                - Deployment Time: $(date)
                
                ## Test Results
                - Health Check: Passed
                - Prediction API: Passed
                
                ## Sample Prediction
                \`\`\`json
                $(cat test_results/prediction_test.json)
                \`\`\`
                EOF
                '''
                
                echo "Generated test report"
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'test_results/**', fingerprint: true
        }
        
        success {
            echo "CD pipeline completed successfully. The penguin classifier API is now available at http://localhost:5000"
        }
        
        failure {
            sh '''
            # Stop container on failure for cleanup
            docker stop penguin-classifier || true
            docker rm penguin-classifier || true
            '''
            echo "CD pipeline failed. Cleaned up resources."
        }
    }
}
