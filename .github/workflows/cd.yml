name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main, master]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set Docker image tag
      id: set_tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        fi
        
    - name: Pull Docker image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${IMAGE_TAG}
        echo "Pulled Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${IMAGE_TAG}"
        
    - name: Create deployment directories
      run: |
        mkdir -p ./data
        mkdir -p ./logs
        mkdir -p ./results
        mkdir -p ./experiments
        
    - name: Deploy container
      run: |
        # Stop any running container with the same name
        docker stop penguin-classifier || true
        docker rm penguin-classifier || true
        
        # Run the container
        docker run -d \
          --name penguin-classifier \
          -p 5000:5000 \
          -v $(pwd)/data:/app/data \
          -v $(pwd)/logs:/app/logs \
          -v $(pwd)/results:/app/results \
          -v $(pwd)/experiments:/app/experiments \
          ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${IMAGE_TAG}
          
        echo "Deployed container from image: ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${IMAGE_TAG}"
        
    - name: Wait for API to be ready
      run: sleep 10
      
    - name: Test health endpoint
      run: |
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health)
        if [ "$HEALTH_STATUS" != "200" ]; then
          echo "Health check failed with status: $HEALTH_STATUS"
          exit 1
        fi
        echo "Health check passed with status: $HEALTH_STATUS"
        
    - name: Test prediction endpoint
      run: |
        # Create test data for prediction
        cat > test_data.json << EOF
        {
            "island": "Torgersen",
            "bill_length_mm": 39.1,
            "bill_depth_mm": 18.7,
            "flipper_length_mm": 181.0,
            "body_mass_g": 3750.0,
            "sex": "male"
        }
        EOF
        
        # Test prediction
        PREDICTION_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d @test_data.json http://localhost:5000/predict)
        echo "Prediction response: ${PREDICTION_RESPONSE}"
        
        # Verify prediction response is valid JSON and has success=true
        echo ${PREDICTION_RESPONSE} | jq -e '.success == true' > /dev/null
        
        # Save results to file for reporting
        mkdir -p test_results
        echo ${PREDICTION_RESPONSE} > test_results/prediction_test.json
        
    - name: Generate test report
      run: |
        # Create a test report
        mkdir -p test_results
        cat > test_results/report.md << EOF
        # Functional Test Report
        
        ## Deployment Information
        - Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${IMAGE_TAG}
        - Deployment Time: $(date)
        
        ## Test Results
        - Health Check: Passed
        - Prediction API: Passed
        
        ## Sample Prediction
        \`\`\`json
        $(cat test_results/prediction_test.json)
        \`\`\`
        EOF
        
        echo "Generated test report"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test_results/
        
    - name: Cleanup
      if: always()
      run: |
        docker stop penguin-classifier || true
        docker rm penguin-classifier || true 