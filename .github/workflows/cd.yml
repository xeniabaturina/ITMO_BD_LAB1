name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main, master]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set Docker image tag
      id: set_tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=latest" >> $GITHUB_OUTPUT
        fi
        echo "Using Docker image tag: ${{ steps.set_tag.outputs.tag || github.event.inputs.image_tag || 'latest' }}"
        
    - name: Download artifacts from CI
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: ci.yml
        name: deployment-artifacts
        path: ./
        
    - name: Verify model file
      run: |
        mkdir -p experiments
        if [ -f "experiments/random_forest.sav" ]; then
          echo "Model file exists and has size: $(du -h experiments/random_forest.sav | cut -f1)"
        else
          echo "::error::Model file not found. CI pipeline may not have completed successfully."
          exit 1
        fi
        
    - name: Create data directories
      run: |
        mkdir -p data logs results
        
    - name: Create deployment config
      run: |
        cat > config.ini << EOF
        [DATA]
        x_data = data/Penguins_X.csv
        y_data = data/Penguins_y.csv
        
        [SPLIT_DATA]
        x_train = data/Train_Penguins_X.csv
        y_train = data/Train_Penguins_y.csv
        x_test = data/Test_Penguins_X.csv
        y_test = data/Test_Penguins_y.csv
        
        [RANDOM_FOREST]
        n_estimators = 100
        max_depth = None
        min_samples_split = 2
        min_samples_leaf = 1
        path = experiments/random_forest.sav
        EOF
        
    - name: Upload deployment config
      uses: actions/upload-artifact@v4
      with:
        name: deployment-config
        path: |
          config.ini
          experiments/
          
  deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    outputs:
      container_status: ${{ steps.deploy_container.outputs.status }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download deployment config
      uses: actions/download-artifact@v4
      with:
        name: deployment-config
        
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Create test data
      run: |
        mkdir -p ./data
        mkdir -p ./logs
        mkdir -p ./results
        mkdir -p ./experiments
        
        # Download sample data for testing
        curl -o ./data/penguins.csv https://raw.githubusercontent.com/allisonhorst/palmerpenguins/master/inst/extdata/penguins.csv
        
        # Create test directories
        mkdir -p ./tests
        
        # Create test data files if they don't exist
        if [ ! -f "./tests/test_0.json" ]; then
          cat > ./tests/test_0.json << EOF
        {
          "X": [
            {
              "island": "Biscoe",
              "bill_length_mm": 45.2,
              "bill_depth_mm": 15.8,
              "flipper_length_mm": 215.0,
              "body_mass_g": 5400.0,
              "sex": "MALE"
            }
          ],
          "y": [
            {
              "species": "Gentoo"
            }
          ]
        }
        EOF
        fi
        
        if [ ! -f "./tests/test_1.json" ]; then
          cat > ./tests/test_1.json << EOF
        {
          "X": [
            {
              "island": "Torgersen",
              "bill_length_mm": 39.1,
              "bill_depth_mm": 18.7,
              "flipper_length_mm": 181.0,
              "body_mass_g": 3750.0,
              "sex": "MALE"
            }
          ],
          "y": [
            {
              "species": "Adelie"
            }
          ]
        }
        EOF
        fi
        
    - name: Pull Docker image
      id: docker_pull
      run: |
        echo "Attempting to pull Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${{ needs.prepare-deployment.outputs.image_tag }}"
        if ! docker pull ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${{ needs.prepare-deployment.outputs.image_tag }}; then
          echo "::error::Failed to pull Docker image. This could be due to authentication issues or the image not being available."
          echo "::error::Please check your DockerHub credentials in GitHub Secrets (DOCKERHUB_USERNAME and DOCKERHUB_TOKEN)."
          echo "::error::If you haven't created a DockerHub repository yet, please create one at https://hub.docker.com/repositories"
          exit 1
        fi
        echo "Pulled Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${{ needs.prepare-deployment.outputs.image_tag }}"
        
    - name: Deploy container
      id: deploy_container
      run: |
        # Stop any running container with the same name
        docker stop penguin-classifier || true
        docker rm penguin-classifier || true
        
        # Run the container
        docker run -d \
          --name penguin-classifier \
          -p 5000:5000 \
          -v $(pwd)/data:/app/data \
          -v $(pwd)/logs:/app/logs \
          -v $(pwd)/results:/app/results \
          -v $(pwd)/experiments:/app/experiments \
          -v $(pwd)/config.ini:/app/config.ini \
          ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${{ needs.prepare-deployment.outputs.image_tag }}
          
        echo "Deployed container from image: ${{ secrets.DOCKERHUB_USERNAME }}/penguin-classifier:${{ needs.prepare-deployment.outputs.image_tag }}"
        
        # Check if container is running
        if docker ps | grep penguin-classifier; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Wait for API to be ready
      run: |
        echo "Waiting for API to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:5000/health | grep -q "healthy"; then
            echo "API is ready!"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
          if [ $i -eq 30 ]; then
            echo "::error::API did not become ready in time"
            docker logs penguin-classifier
            exit 1
          fi
        done
        
  test-deployment:
    needs: [prepare-deployment, deploy]
    runs-on: ubuntu-latest
    if: needs.deploy.outputs.container_status == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest pandas numpy
        
    - name: Check container logs
      run: |
        docker logs penguin-classifier
        
    - name: Test health endpoint
      id: health_check
      run: |
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health)
        if [ "$HEALTH_STATUS" != "200" ]; then
          echo "Health check failed with status: $HEALTH_STATUS"
          echo "::error::Health check failed with status: $HEALTH_STATUS"
          docker logs penguin-classifier
          exit 1
        fi
        echo "Health check passed with status: $HEALTH_STATUS"
        
        # Get health check response
        HEALTH_RESPONSE=$(curl -s http://localhost:5000/health)
        echo "Health check response: $HEALTH_RESPONSE"
        
    - name: Test prediction endpoint with single sample
      run: |
        # Create test data for prediction
        cat > test_data.json << EOF
        {
          "island": "Biscoe", 
          "bill_length_mm": 45.2, 
          "bill_depth_mm": 15.8, 
          "flipper_length_mm": 215.0, 
          "body_mass_g": 5400.0, 
          "sex": "MALE"
        }
        EOF
        
        # Test prediction endpoint
        PREDICTION=$(curl -s -X POST -H "Content-Type: application/json" -d @test_data.json http://localhost:5000/predict)
        echo "Prediction result: $PREDICTION"
        
        # Check if prediction was successful
        if [[ $PREDICTION == *"success\":true"* ]]; then
          echo "Prediction endpoint test passed"
        else
          echo "Prediction endpoint test failed"
          exit 1
        fi
        
    - name: Run integration tests
      run: |
        # Create a Python script for integration testing
        cat > integration_test.py << EOF
        import requests
        import json
        import sys
        
        def test_prediction(test_file, expected_species):
            # Load test data
            with open(test_file, 'r') as f:
                test_data = json.load(f)
            
            # Extract first sample
            sample = test_data['X'][0]
            
            # Make prediction request
            response = requests.post('http://localhost:5000/predict', json=sample)
            
            # Check if request was successful
            if response.status_code != 200:
                print(f"Error: Received status code {response.status_code}")
                print(response.text)
                return False
                
            # Parse response
            result = response.json()
            
            # Check if prediction was successful
            if not result.get('success', False):
                print(f"Error: Prediction failed - {result.get('error', 'Unknown error')}")
                return False
                
            # Check if species matches expected
            predicted_species = result.get('predicted_species')
            if predicted_species != expected_species:
                print(f"Error: Expected species {expected_species}, but got {predicted_species}")
                return False
                
            print(f"Test passed: Correctly predicted {predicted_species}")
            return True
            
        # Run tests
        test_files = [
            ('tests/test_0.json', 'Gentoo'),
            ('tests/test_1.json', 'Adelie')
        ]
        
        failures = 0
        for test_file, expected_species in test_files:
            print(f"Testing {test_file}...")
            if not test_prediction(test_file, expected_species):
                failures += 1
                
        # Exit with status code based on test results
        sys.exit(failures)
        EOF
        
        # Run the integration test
        python integration_test.py
        
    - name: Test input validation
      run: |
        # Test with missing field
        echo "Testing with missing field..."
        MISSING_FIELD_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"island": "Biscoe", "bill_length_mm": 45.2}' http://localhost:5000/predict)
        echo "Response: $MISSING_FIELD_RESPONSE"
        if [[ $MISSING_FIELD_RESPONSE == *"Missing required fields"* ]]; then
          echo "Missing field validation test passed"
        else
          echo "Missing field validation test failed"
          exit 1
        fi
        
        # Test with invalid data type
        echo "Testing with invalid data type..."
        INVALID_TYPE_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"island": "Biscoe", "bill_length_mm": "not_a_number", "bill_depth_mm": 15.8, "flipper_length_mm": 215.0, "body_mass_g": 5400.0, "sex": "MALE"}' http://localhost:5000/predict)
        echo "Response: $INVALID_TYPE_RESPONSE"
        if [[ $INVALID_TYPE_RESPONSE == *"must be a number"* ]]; then
          echo "Invalid data type validation test passed"
        else
          echo "Invalid data type validation test failed"
          exit 1
        fi
        
  report-results:
    needs: [prepare-deployment, deploy, test-deployment]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate deployment report
      run: |
        # Create deployment report
        cat > deployment_report.md << EOF
        # Deployment Report
        
        ## Deployment Status
        - **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - **Image Tag:** ${{ needs.prepare-deployment.outputs.image_tag }}
        - **Deployment Status:** ${{ needs.deploy.outputs.container_status == 'success' && 'Success' || 'Failed' }}
        - **Testing Status:** ${{ needs.test-deployment.result == 'success' && 'Success' || 'Failed' }}
        
        ## Details
        - **Repository:** ${{ github.repository }}
        - **Workflow:** ${{ github.workflow }}
        - **Run ID:** ${{ github.run_id }}
        - **Triggered By:** ${{ github.event_name == 'workflow_dispatch' && 'Manual Trigger' || 'CI Pipeline' }}
        
        ## Next Steps
        - Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed logs
        - Access the API at http://localhost:5000 (if running locally)
        - Use the /predict endpoint to make predictions
        EOF
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment_report.md
        
    - name: Notify on failure
      if: needs.deploy.outputs.container_status != 'success' || needs.test-deployment.result != 'success'
      run: |
        echo "::error::Deployment or testing failed. Please check the logs for details."
        echo "::error::Deployment status: ${{ needs.deploy.outputs.container_status }}"
        echo "::error::Testing status: ${{ needs.test-deployment.result }}"
